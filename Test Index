import webbrowser
import time
import pytube
import schedule
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

class AnnouncementsPlayer:
    def __init__(self, youtube_channel="https://www.youtube.com/@BevFaceyAnnouncements"):
        self.youtube_channel = youtube_channel
        logging.basicConfig(level=logging.INFO, 
                            format='%(asctime)s - %(levelname)s: %(message)s')
        self.logger = logging.getLogger(__name__)
        
    def get_latest_video_duration(self):
        """Get duration of the latest video from the channel"""
        try:
            channel = pytube.Channel(self.youtube_channel)
            latest_video = list(channel.videos)[0]  # Most recent video
            duration = latest_video.length
            
            self.logger.info(f"Latest video duration: {duration} seconds")
            return duration
        
        except Exception as e:
            self.logger.error(f"Video duration fetch error: {e}")
            return 3 * 60  # 3 minutes default
    
    def play_announcements(self):
        """Play morning announcements with Selenium"""
        try:
            # Open Chrome webdriver
            driver = webdriver.Chrome()
            
            # Get latest video URL
            channel = pytube.Channel(self.youtube_channel)
            latest_video_url = list(channel.videos)[0].watch_url
            
            # Navigate to video
            driver.get(latest_video_url)
            
            # Wait for video to load and click fullscreen
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "video"))
            )
            
            # Fullscreen 
            fullscreen_button = driver.find_element(By.CSS_SELECTOR, ".ytp-fullscreen-button")
            fullscreen_button.click()
            
            # Get video duration and wait
            video_duration = self.get_latest_video_duration()
            time.sleep(video_duration + 10)
            
            # Close browser
            driver.quit()
            
        except Exception as e:
            self.logger.error(f"Announcement playback error: {e}")
    
    def schedule_announcements(self):
        """Schedule daily morning announcements"""
        schedule.every().monday.at("08:35").do(self.play_announcements)
        schedule.every().tuesday.at("08:35").do(self.play_announcements)
        schedule.every().wednesday.at("08:35").do(self.play_announcements)
        schedule.every().thursday.at("08:35").do(self.play_announcements)
        schedule.every().friday.at("08:35").do(self.play_announcements)

def main():
    player = AnnouncementsPlayer()
    player.schedule_announcements()

if __name__ == "__main__":
    main()
