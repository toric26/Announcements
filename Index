import webbrowser
import time
import socket
#import schedule
#import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time
import re
import keyboard # type: ignore
import os


youtube_channel="https://www.youtube.com/@BevFaceyAnnouncements"

from googleapiclient.discovery import build

with open(r'C:\Users\Facey\Downloads\apikey.txt', 'r') as file:
    API_KEY = file.read().strip()

# YouTube channel ID for "@bevfaceyannouncements"
CHANNEL_ID = "UCS8NR4uTYkC86rZsnf6LRCA"

# Create a YouTube Data API service
youtube = build('youtube', 'v3', developerKey=API_KEY)

# Get the latest video for the channel
latest_video = youtube.search().list(part='snippet', channelId=CHANNEL_ID, type='video', order='date', maxResults=1).execute()

# Get the video details including duration
video_id = latest_video['items'][0]['id']['videoId']
video_details = youtube.videos().list(part='contentDetails', id=video_id).execute()
duration = video_details['items'][0]['contentDetails']['duration']

# Print the title, URL, and duration of the latest video
for item in latest_video['items']:
    #print("Latest Video Title:", item['snippet']['title'])
    print("Latest Video URL:", f"https://www.youtube.com/watch?v={item['id']['videoId']}")
    print("Video Duration:", duration)

def parse_time_string(time_str):
    # Remove 'pt' prefix if present
    time_str = time_str.lower().replace('pt', '')
   
    # Regular expression to extract minutes and seconds
    # Handles formats like 1m8s
    minutes = re.findall(r'(\d+)m', time_str)
    seconds = re.findall(r'(\d+)s', time_str)
   
    total_seconds = 0
   
    # Add minutes if found
    if minutes:
        total_seconds += int(minutes[0]) * 60
   
    # Add seconds if found
    if seconds:
        total_seconds += int(seconds[0])
   
    return total_seconds

length = parse_time_string(duration)

# Configuration
UDP_IP = "192.168.140.25"  # VP-440 IP address (default)
UDP_PORT = 50000         # VP-440 UDP port (default)

# Create a UDP socket
#sock = socket.SOCK_DGRAM
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# Command to switch to HDMI input 3
command = "#ROUTE 12,1,2\r"

# Send the command
sock.sendto(command.encode(), (UDP_IP, UDP_PORT))
print("switched to HDMI 3 >w<")
#time.sleep(1 + length)

def autoplay_youtube_video(video_url):
    """
    Autoplay a YouTube video and retrieve its URL using Selenium
   
    :param video_url: Full YouTube video URL
    :return: Tuple of (current video URL, video title)
    """
    # Set up Chrome options
    chrome_options = Options()
    # Uncomment the next line if you want to run in headless mode
    # chrome_options.add_argument("--headless")
   
    # Set up the WebDriver
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
   
    try:
        # Navigate to the video URL
        driver.get(f"https://www.youtube.com/watch?v={item['id']['videoId']}")
       
        # Wait for the page to load
        time.sleep(3)
       
        # Find and click the play button if needed
        try:
            # Try to find and click the YouTube play button
            play_button = driver.find_element(By.CLASS_NAME, "ytp-play-button")
            play_button.click()
        except Exception as e:
            print("Could not find or click play button automatically")
        keyboard.press('f11')
        time.sleep(1)
        keyboard.press('f')
        keyboard.release('f')
        
       
        # Wait for the video to start playing
        time.sleep(5 + length)
       
        # Get the current video URL (might be different from original if redirected)
        current_video_url = driver.current_url
       
        # Try to get the video title
        try:
            video_title = driver.title
        except Exception:
            video_title = "Unknown Title"
       
        return current_video_url, video_title
   
    except Exception as e:
        print(f"An error occurred: {e}")
        return None, None
   
    finally:
        # Always close the browser
        driver.quit()
        command = "#ROUTE 12,1,0\r"

        # Send the command
        sock.sendto(command.encode(), (UDP_IP, UDP_PORT))


        # Close the socket
        sock.close()
        print("switched back to default HDMI :3")
        print("done! :3 uwu")

def main():
    # Example usage
    video_url = f"https://www.youtube.com/watch?v={item['id']['videoId']}"  # Replace with your desired video URL
   
    # Call the function
    result_url, title = autoplay_youtube_video(video_url)
   
    if result_url:
        print(f"Video Title: {title}")
        print(f"Current Video URL: {result_url}")
    else:
        print("Failed to access the video")

if __name__ == "__main__":
    main()


os.system("cls")
